#!/bin/bash
# =====================================
# Script qu·∫£n l√Ω VPS GCP th√¥ng minh (by dockaka)
# ƒê√£ c·∫≠p nh·∫≠t v√† t·ªëi ∆∞u h√≥a
# =====================================

# ----- Ch·ªçn project -----
echo "üëâ Danh s√°ch project b·∫°n c√≥:"
gcloud projects list --format="table(projectNumber, projectId, name)"

read -rp "Nh·∫≠p PROJECT_ID ho·∫∑c PROJECT_NUMBER mu·ªën d√πng: " PROJECT_INPUT
if [[ -z "$PROJECT_INPUT" ]]; then
  echo "‚ùå B·∫°n ch∆∞a nh·∫≠p PROJECT_ID ho·∫∑c PROJECT_NUMBER!"
  exit 1
fi

# N·∫øu nh·∫≠p l√† s·ªë (PROJECT_NUMBER) -> ƒë·ªïi sang PROJECT_ID
if [[ "$PROJECT_INPUT" =~ ^[0-9]+$ ]]; then
  PROJECT_ID=$(gcloud projects describe "$PROJECT_INPUT" --format="value(projectId)")
else
  PROJECT_ID="$PROJECT_INPUT"
fi

gcloud config set project "$PROJECT_ID" >/dev/null
echo "‚úÖ ƒêang l√†m vi·ªác tr√™n project: $PROJECT_ID"

# ----- Bi·∫øn c·∫•u h√¨nh (Chung) -----
ZONE="asia-southeast1-a"
VM_NAME_BASE="vps-ubuntu-sing"
IMAGE_FAMILY="ubuntu-2204-lts"
IMAGE_PROJECT="ubuntu-os-cloud"
DISK_TYPE_DEFAULT="pd-ssd"
FIREWALL_NAME="allow-web-app"

# ----- Helpers -----

# T√¨m t√™n instance t·ª´ T√äN, IP Ngo√†i ho·∫∑c IP Trong
# T·ªëi ∆∞u: D√πng --limit=1 thay v√¨ | head -n1
resolve_instance_from_input() {
  local input="$1"
  local by_name
  by_name=$(gcloud compute instances list --project="$PROJECT_ID" \
    --filter="name=($input)" --format="value(name)" --limit=1)
  [[ -n "$by_name" ]] && { echo "$by_name"; return; }

  local by_ip
  by_ip=$(gcloud compute instances list --project="$PROJECT_ID" \
    --filter="EXTERNAL_IP:$input OR INTERNAL_IP:$input" \
    --format="value(name)" --limit=1)
  [[ -n "$by_ip" ]] && { echo "$by_ip"; return; }

  echo ""
}

# L·∫•y zone c·ªßa m·ªôt instance
get_zone_for_instance() {
  local name="$1"
  local zone_full
  zone_full=$(gcloud compute instances list --project="$PROJECT_ID" \
    --filter="name=($name)" --format="value(zone)" --limit=1)
  # Tr√≠ch xu·∫•t ph·∫ßn cu·ªëi c√πng c·ªßa URL (t√™n zone)
  [[ -n "$zone_full" ]] && echo "${zone_full##*/}" || echo ""
}

# L·∫•y tr·∫°ng th√°i VM (RUNNING, TERMINATED, ...)
vm_status() {
  local name="$1"
  local zone="$2"
  gcloud compute instances describe "$name" --zone="$zone" --project="$PROJECT_ID" \
    --format='get(status)' 2>/dev/null
}

# L·∫•y IP ngo√†i c·ªßa VM
get_external_ip() {
  local name="$1"
  local zone="$2"
  gcloud compute instances describe "$name" --zone="$zone" --project="$PROJECT_ID" \
    --format="get(networkInterfaces[0].accessConfigs[0].natIP)"
}

# C√†i ƒë·∫∑t firewall rule n·∫øu ch∆∞a t·ªìn t·∫°i
setup_firewall() {
  if ! gcloud compute firewall-rules describe "$FIREWALL_NAME" --project="$PROJECT_ID" >/dev/null 2>&1; then
    echo "üëâ T·∫°o firewall rule $FIREWALL_NAME..."
    gcloud compute firewall-rules create "$FIREWALL_NAME" \
      --direction=INGRESS \
      --priority=1000 \
      --network=default \
      --action=ALLOW \
      --rules=tcp:22,tcp:80,tcp:443,tcp:3000,tcp:5000,tcp:3100,tcp:5100 \
      --source-ranges=0.0.0.0/0 \
      --target-tags="$FIREWALL_NAME" \
      --project="$PROJECT_ID"
  fi
}

# H√†m t·∫°o VM ch√≠nh (t√°ch ri√™ng logic)
create_vm() {
  local MACHINE_TYPE="$1"
  local DISK_SIZE_GB="$2"
  local DISK_TYPE="${3:-$DISK_TYPE_DEFAULT}" # D√πng disk type custom ho·∫∑c m·∫∑c ƒë·ªãnh

  local NAME="$VM_NAME_BASE"

  # Ki·ªÉm tra n·∫øu t√™n VM ƒë√£ t·ªìn t·∫°i
  if gcloud compute instances list --project="$PROJECT_ID" --filter="name=($NAME)" --format="value(name)" --limit=1 | grep -q "^$NAME$"; then
    NAME="${VM_NAME_BASE}-$(date +%Y%m%d%H%M%S)"
    echo "‚ö†Ô∏è VM g·ªëc '$VM_NAME_BASE' ƒë√£ t·ªìn t·∫°i, t·∫°o VM m·ªõi v·ªõi t√™n: $NAME"
  fi

  setup_firewall
  echo "üëâ ƒêang t·∫°o VM $NAME ($MACHINE_TYPE / ${DISK_SIZE_GB}GB / $DISK_TYPE)..."
  gcloud compute instances create "$NAME" \
    --zone="$ZONE" \
    --machine-type="$MACHINE_TYPE" \
    --image-family="$IMAGE_FAMILY" \
    --image-project="$IMAGE_PROJECT" \
    --boot-disk-size="${DISK_SIZE_GB}GB" \
    --boot-disk-type="$DISK_TYPE" \
    --tags="$FIREWALL_NAME" \
    --project="$PROJECT_ID"

  if [[ $? -eq 0 ]]; then
    echo "‚úÖ VPS ƒë√£ t·∫°o xong. SSH v√†o b·∫±ng:"
    echo "gcloud compute ssh $NAME --zone=$ZONE --project=$PROJECT_ID"
  else
    echo "‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o VM."
  fi
}

# Ki·ªÉm tra port c·ªßa VM
check_ports_vm() {
  read -rp "Nh·∫≠p T√äN ho·∫∑c IP VM ƒë·ªÉ ki·ªÉm tra port: " token
  local target
  target=$(resolve_instance_from_input "$token")
  [[ -z "$target" ]] && { echo "‚ùå Kh√¥ng t√¨m th·∫•y VM."; return; } # D√πng return thay v√¨ exit

  local zone
  zone=$(get_zone_for_instance "$target")

  echo "üëâ Ki·ªÉm tra firewall rules √°p d·ª•ng cho VM $target..."
  local tags
  tags=$(gcloud compute instances describe "$target" --zone="$zone" --project="$PROJECT_ID" \
    --format="get(tags.items)")

  if [[ -z "$tags" ]]; then
    echo "‚ùå VM $target kh√¥ng c√≥ network tags n√†o."
    return
  fi

  echo "VM $target c√≥ c√°c tags: $tags"
  for tag in $tags; do
    echo "üîé Firewall rule cho tag: $tag"
    gcloud compute firewall-rules list --project="$PROJECT_ID" \
      --filter="targetTags:($tag) AND direction=INGRESS AND action=ALLOW" \
      --format="table(name, allowed[].map().firewall_rule().list():label=PORT_ƒê∆Ø·ª¢C_M·ªû)"
  done
}

# Th√™m port v√†o firewall rule m·∫∑c ƒë·ªãnh
add_ports_firewall() {
  read -rp "Nh·∫≠p port mu·ªën m·ªü th√™m (vd: 8080 ho·∫∑c 8080,9000): " ports
  if [[ -z "$ports" ]]; then
    echo "‚ùå Kh√¥ng nh·∫≠p port."
    return
  fi

  # L·∫•y danh s√°ch port c≈©
  local old_rules
  old_rules=$(gcloud compute firewall-rules describe "$FIREWALL_NAME" --project="$PROJECT_ID" \
    --format="value(allowed[0].ports)" | tr ';' ',')

  echo "üëâ ƒêang m·ªü th√™m port: $ports (C√°c port c≈©: $old_rules)..."
  gcloud compute firewall-rules update "$FIREWALL_NAME" \
    --allow="tcp:22,tcp:80,tcp:443,tcp:3000,tcp:5000,tcp:3100,tcp:5100,tcp:$ports,$old_rules" \
    --project="$PROJECT_ID"
  echo "‚úÖ ƒê√£ c·∫≠p nh·∫≠t rule $FIREWALL_NAME"
}

# ----- Menu ch√≠nh -----
# S·ª≠ d·ª•ng cat <<EOF ƒë·ªÉ hi·ªÉn th·ªã menu r√µ r√†ng h∆°n
cat <<EOF
=======================================
   MENU QU·∫¢N L√ù VPS UBUNTU GCP (v2)
=======================================

--- T·∫°o VPS Nhanh (Ubuntu 22.04 / SSD) ---
 1) T·∫°o VPS (1 vCPU / 1GB RAM / 30GB SSD)  - (e2-micro)
 2) T·∫°o VPS (8 vCPU / 32GB RAM / 100GB SSD) - (e2-standard-8)
 3) T·∫°o VPS (2 vCPU / 8GB RAM / 100GB SSD)  - (e2-standard-2)
 4) T·∫°o VPS (4 vCPU / 16GB RAM / 100GB SSD) - (e2-standard-4)

--- Qu·∫£n L√Ω VPS ---
 5) Li·ªát k√™ danh s√°ch t·∫•t c·∫£ VM
 6) D·ª´ng / Ch·∫°y l·∫°i VM (theo T√äN ho·∫∑c IP)
 7) SSH v√†o VM (theo T√äN ho·∫∑c IP)
 8) Xo√° VM (theo T√äN ho·∫∑c IP) (C·∫®N TH·∫¨N!)

--- C·∫•u H√¨nh M·∫°ng ---
 9) Ki·ªÉm tra port ƒë√£ m·ªü c·ªßa 1 VM
 10) Th√™m port th·ªß c√¥ng v√†o firewall '$FIREWALL_NAME'

 0) Tho√°t
=======================================
EOF

read -rp "Ch·ªçn (0-10): " choice

case "$choice" in
  # T·∫°o VPS
  1) create_vm "e2-micro" "30" ;;
  2) create_vm "e2-standard-8" "100" ;;
  3) create_vm "e2-standard-2" "100" ;;
  4) create_vm "e2-standard-4" "100" ;;

  # Qu·∫£n l√Ω
  5)
    echo "üëâ ƒêang li·ªát k√™ VM trong $PROJECT_ID..."
    gcloud compute instances list --project="$PROJECT_ID"
    ;;
  6)
    read -rp "Nh·∫≠p T√äN ho·∫∑c IP ƒë·ªÉ D·ª´ng/Ch·∫°y l·∫°i: " token
    target=$(resolve_instance_from_input "$token")
    [[ -z "$target" ]] && { echo "‚ùå Kh√¥ng t√¨m th·∫•y VM."; exit 1; }

    zone=$(get_zone_for_instance "$target")
    status=$(vm_status "$target" "$zone")

    if [[ "$status" == "RUNNING" ]]; then
      echo "üëâ VM $target ƒëang ch·∫°y. ƒêang d·ª´ng l·∫°i..."
      gcloud compute instances stop "$target" --zone="$zone" --project="$PROJECT_ID" --quiet
      echo "‚úÖ VM $target ƒë√£ d·ª´ng."
    elif [[ "$status" == "TERMINATED" ]]; then
      echo "üëâ VM $target ƒëang t·∫Øt. Kh·ªüi ƒë·ªông l·∫°i..."
      gcloud compute instances start "$target" --zone="$zone" --project="$PROJECT_ID" --quiet
      # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ VM l·∫•y IP
      sleep 5
      new_ip=$(get_external_ip "$target" "$zone")
      echo "‚úÖ VM $target ƒë√£ kh·ªüi ƒë·ªông xong."
      echo "üåê IP m·ªõi: $new_ip"
    else
      echo "‚ö†Ô∏è VM $target tr·∫°ng th√°i: $status (Kh√¥ng th·ªÉ D·ª´ng/Ch·∫°y)"
    fi
    ;;
  7)
    read -rp "Nh·∫≠p T√äN ho·∫∑c IP ƒë·ªÉ SSH: " token
    target=$(resolve_instance_from_input "$token")
    [[ -z "$target" ]] && { echo "‚ùå Kh√¥ng t√¨m th·∫•y VM."; exit 1; }

    zone=$(get_zone_for_instance "$target")
    echo "üëâ ƒêang k·∫øt n·ªëi SSH ƒë·∫øn $target..."
    gcloud compute ssh "$target" --zone="$zone" --project="$PROJECT_ID"
    ;;
  8)
    read -rp "Nh·∫≠p T√äN ho·∫∑c IP ƒë·ªÉ XO√Å (C·∫®N TH·∫¨N!): " token
    target=$(resolve_instance_from_input "$token")
    [[ -z "$target" ]] && { echo "‚ùå Kh√¥ng t√¨m th·∫•y VM."; exit 1; }

    zone=$(get_zone_for_instance "$target")
    # Th√™m m·ªôt b∆∞·ªõc x√°c nh·∫≠n n·ªØa cho an to√†n
    read -rp "B·∫°n c√≥ CH·∫ÆC CH·∫ÆN mu·ªën xo√° vƒ©nh vi·ªÖn VM '$target' kh√¥ng? (yes/no): " confirm
    if [[ "$confirm" == "yes" ]]; then
      echo "üëâ ƒêang xo√° VM $target..."
      gcloud compute instances delete "$target" --zone="$zone" --project="$PROJECT_ID" --quiet
      echo "‚úÖ ƒê√£ xo√° VM $target."
    else
      echo "üëç ƒê√£ hu·ª∑ thao t√°c xo√°."
    fi
    ;;

  # M·∫°ng
  9) check_ports_vm ;;
  10) add_ports_firewall ;;

  # Tho√°t
  0)
    echo "üëã T·∫°m bi·ªát!"
    ;;
  *)
    echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
    ;;
esac
